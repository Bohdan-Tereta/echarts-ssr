# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: echarts-ssr
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  profile: default
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      chart:
        path: ./functions/get-chart
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

package:
  individually: true
  include:
    - "!*/**"

plugins:
  - serverless-plugin-common-excludes
  # - serverless-plugin-include-dependencies
  - serverless-offline
  - serverless-single-page-app-plugin
  #- serverless-print-resolved-plugin
  # - serverless-s3-remover

layers:
  canvas:
    package:
      artifact: "./output/node_modules.zip"

functions:
  hello:
    handler: functions/get-chart/handler.getChart
    # image:
    #   name: chart
    #   command: functions/get-chart/handler.getChart
    memorySize: 256   
    events:
      - http:
          path: hello
          method: post
    layers:
      - { Ref: CanvasLambdaLayer }
    package:
      include:
        - functions/get-chart/*.js
      exclude:
        - functions/get-chart/node_modules/**
  sveltekit:
    #handler: functions/sveltekit/my-app/.vercel_build_output/functions/node/render/index.default
    handler: functions/sveltekit/my-app/.vercel_build_output/functions/node/render/index.default
    #handler: functions/sveltekit/my-app/.netlify/functions-internal/__render.handler
    #   .
    # image:
    #   name: chart
    #   command: functions/get-chart/handler.getChart
    memorySize: 256   
    events:
      - http:
          path: sveltekit/{proxy+}
          method: any
    package:
      include:
       - functions/sveltekit/my-app/.vercel_build_output/functions/node/render/index.js
       #- functions/sveltekit/my-app/.netlify/functions-internal/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: 
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    { "Ref": "WebAppS3Bucket" },
                    "/*"
                  ]
                ]
    ## Specifying the CloudFront Distribution to server your Web Application
    OriginRequestPolicy:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
            CookiesConfig:
                    CookieBehavior: all
            HeadersConfig:
                    HeaderBehavior: whitelist
                    Headers:
                      - Accept
            Name: Lambda
            QueryStringsConfig:
                    QueryStringBehavior: all
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::Join: [
                  "", [
                    { "Ref": "WebAppS3Bucket" },
                    ".s3.amazonaws.com"
                  ]
                ]
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z

            - DomainName: 
                Fn::Join: [
                  "", [
                    { "Ref": "ApiGatewayRestApi" },
                    ".execute-api.",
                    { "Ref": "AWS::Region" },
                    ".amazonaws.com"
                  ]
                ]
              OriginPath: /dev/sveltekit  
              # gktn50vdec.execute-api.us-east-1.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp1
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: true
          CacheBehaviors:
            - PathPattern: "/_app/*"
              TargetOriginId: "WebApp"
              ViewerProtocolPolicy: "redirect-to-https"
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
              # CachingOptimized 1-86400-365*86400 seconds TTL no cookies no queries
              CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
            - PathPattern: "/*"
              TargetOriginId: "WebApp1"
              ViewerProtocolPolicy: "redirect-to-https"
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
              # Caching disabled, TODO: define proper caching policy, do not add Host header here or you'll get issues
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html
              # All URL query strings, HTTP headers, and cookies that you include in the cache key (using a cache policy) are automatically included in origin requests. Use the origin request policy to specify the information that you want to include in origin requests, but not include in the cache key.
              # AllViewer: all cookies, all queryStrings, only Accept header, no Host Header (as it breaks Gate) TODO: add Authorize and other headers, maybe remove some cookies
              OriginRequestPolicyId: { "Ref": "OriginRequestPolicy" }
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT

          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
                # hack, gateway doesn't allow to access / path so point to any other existing app path
              ResponsePagePath: /about

          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppS3BucketOutput:
      Value:
        'Ref': WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
    ApiGatewayRestApi:
      Value:
        Ref: ApiGatewayRestApi
    apiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
    OriginRequestPolicy:
      Value:
        'Ref': OriginRequestPolicy

custom:
  s3LocalPath: functions/sveltekit/my-app/.vercel_build_output/static
  # remover:
  #   buckets: 
  #     - charts-ssr-dev-webapps3bucket-1cnwuy8g4tgbi
    # prompt: ${self:custom.boolean.${opt:s3-remover-prompt, 'true'}}